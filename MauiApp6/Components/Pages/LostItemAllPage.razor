@page "/lost-list"
@inject LostItemsViewModel ViewModel
@inject IJSRuntime JSRuntime
@using Microsoft.Maui.Storage
@code {
    private string email = "";
    private string description = "";
    private string status = "";

    private string category = "";
    private LostItem? itemToEdit = null;
    private bool isEditing = false;
    private bool isLoading = true; // Ajout d'un état de chargement

    protected override async Task OnInitializedAsync()
    {
        email = await SecureStorage.GetAsync("user_email");
        await ViewModel.LoadLostItemsAsync(); // Chargement des items
        isLoading = false; // Fin du chargement
    }

    private async Task AddItem()
    {
        if (isEditing && itemToEdit != null)
        {
            itemToEdit.Description = description;
            itemToEdit.Category = category;
            await ViewModel.UpdateLostItemAsync(itemToEdit);
            isEditing = false;
            itemToEdit = null;
        }
        else
        {
            await ViewModel.CaptureLostItemAsync(description, category, email, status);
        }

        description = "";
        category = "";
    }

    private void EditItem(LostItem item)
    {
        itemToEdit = item;
        isEditing = true;
        description = item.Description;
        category = item.Category;
    }

    private async Task DeleteItem(string id)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this item?");
        if (confirmed)
        {
            await ViewModel.DeleteLostItemAsync(id);
        }
    }

    private void CancelEdit()
    {
        isEditing = false;
        itemToEdit = null;
        description = "";
        category = "";
    }
}

<style>
    /* Modern CSS Variables */
    :root {
        --primary-color: #4361ee;
        --secondary-color: #3f37c9;
        --accent-color: #4895ef;
        --danger-color: #f72585;
        --success-color: #4cc9f0;
        --light-color: #f8f9fa;
        --dark-color: #212529;
        --gray-color: #6c757d;
        --border-radius: 12px;
        --box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
        --transition: all 0.3s ease;
    }

    /* Base Styles */
    body {
        font-family: 'Segoe UI', system-ui, -apple-system, sans-serif;
        background-color: #f5f7fa;
        color: var(--dark-color);
        line-height: 1.6;
        margin: 0;
        padding: 0;
    }

    h1, h2, h3 {
        color: var(--primary-color);
        font-weight: 600;
    }

    h1 {
        text-align: center;
        margin: 2rem 0;
        font-size: 2.5rem;
        background: linear-gradient(90deg, var(--primary-color), var(--accent-color));
        -webkit-background-clip: text;
        background-clip: text;
        color: transparent;
    }

    h3 {
        text-align: center;
        margin-bottom: 2rem;
        color: var(--gray-color);
        font-weight: 500;
    }

    /* Card Layout */
    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 20px;
    }

    /* Item Cards Grid */
    .item-list {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
        gap: 25px;
        padding: 20px 0;
    }

    .item-card {
        background: white;
        border-radius: var(--border-radius);
        overflow: hidden;
        box-shadow: var(--box-shadow);
        transition: var(--transition);
        border: 1px solid rgba(0, 0, 0, 0.05);
    }

        .item-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 24px rgba(0, 0, 0, 0.15);
        }

    .item-image-container {
        height: 200px;
        overflow: hidden;
        position: relative;
    }

    .item-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: var(--transition);
    }

    .item-card:hover .item-image {
        transform: scale(1.05);
    }

    .item-details {
        padding: 1.5rem;
    }

        .item-details p {
            margin: 0.5rem 0;
            color: var(--gray-color);
        }

        .item-details strong {
            color: var(--dark-color);
            font-weight: 600;
        }

    .item-meta {
        display: flex;
        justify-content: space-between;
        margin-top: 1rem;
        font-size: 0.9rem;
        color: var(--gray-color);
        border-top: 1px solid #eee;
        padding-top: 1rem;
    }

    /* Empty State */
    .empty-state {
        text-align: center;
        padding: 4rem 2rem;
        background: white;
        border-radius: var(--border-radius);
        box-shadow: var(--box-shadow);
        max-width: 600px;
        margin: 2rem auto;
    }

    .empty-state-icon {
        font-size: 3rem;
        color: var(--accent-color);
        margin-bottom: 1rem;
    }

    /* Buttons */
    .btn {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        padding: 0.75rem 1.5rem;
        border-radius: 50px;
        font-weight: 600;
        cursor: pointer;
        transition: var(--transition);
        border: none;
        font-size: 1rem;
        margin: 0.25rem;
    }

    .btn-primary {
        background: var(--primary-color);
        color: white;
    }

        .btn-primary:hover {
            background: var(--secondary-color);
            transform: translateY(-2px);
        }

    .btn-danger {
        background: var(--danger-color);
        color: white;
    }

        .btn-danger:hover {
            background: #d1146a;
            transform: translateY(-2px);
        }

    .btn-warning {
        background: #ff9e00;
        color: white;
    }

        .btn-warning:hover {
            background: #e68f00;
            transform: translateY(-2px);
        }

    .btn-secondary {
        background: var(--gray-color);
        color: white;
    }

        .btn-secondary:hover {
            background: #5a6268;
            transform: translateY(-2px);
        }

    .button-group {
        display: flex;
        gap: 10px;
        margin-top: 1rem;
    }

    /* Status Badge */
    .status-badge {
        display: inline-block;
        padding: 0.25rem 0.75rem;
        border-radius: 50px;
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .status-found {
        background: rgba(76, 201, 240, 0.1);
        color: var(--success-color);
    }

    .status-lost {
        background: rgba(247, 37, 133, 0.1);
        color: var(--danger-color);
    }


</style>

<div class="container">
    <h1>Lost & Found Items</h1>
    <h3>Welcome, @email</h3>

    @if (!ViewModel.LostItems.Any())
    {
        <div class="empty-state">
            <div class="empty-state-icon">📦</div>
            <h2>No items reported yet</h2>
            <p>Be the first to report a lost or found item!</p>
        </div>
    }
    else
    {
        <div class="item-list">
            @foreach (var item in ViewModel.LostItems.OrderByDescending(i => i.DateReported))
            {
                <div class="item-card">
                    <div class="item-image-container">
                        @if (!string.IsNullOrEmpty(item.PhotoPath))
                        {
                            <img src="@item.PhotoPath" class="item-image" alt="Item photo" />

                        }
                        else
                        {
                            <div style="background: #eee; height: 100%; display: flex; align-items: center; justify-content: center;">
                                <span style="color: #999; font-size: 2rem;">📷</span>
                            </div>
                        }
                    </div>

                    <div class="item-details">
                        <p><strong>Statut:</strong> @item.Status</p>

                        <p><strong>Description:</strong> @item.Description</p>
                        <p><strong>Category:</strong> @item.Category</p>
                        <p><strong>Location:</strong> @item.Location</p>

                        <div class="item-meta">
                            <span>Reported by @item.Email</span>
                            <span>@item.DateReported.ToString("MMM dd, yyyy")</span>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>