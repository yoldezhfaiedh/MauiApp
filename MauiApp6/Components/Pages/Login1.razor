 @page "/" 

@* @using Microsoft.AspNetCore.Components.Authorization *@
@* @using System.ComponentModel.DataAnnotations *@
@* @inject AuthenticationStateProvider AuthStateProvider *@
@* @inject NavigationManager Navigation *@
@* @inject IAppService AppService *@

@* <EditForm Model="@model" OnValidSubmit="@HandleLogin"> *@
@*     <DataAnnotationsValidator /> *@
@*     <div class="form-group"> *@
@*         <label>Email</label> *@
@*         <InputText @bind-Value="model.Email" class="form-control" /> *@
@*         <ValidationMessage For="@(() => model.Email)" /> *@
@*     </div> *@
@*     <div class="form-group"> *@
@*         <label>Mot de passe</label> *@
@*         <InputText type="password" @bind-Value="model.Password" class="form-control" /> *@
@*         <ValidationMessage For="@(() => model.Password)" /> *@
@*     </div> *@
@*     <button type="submit" class="btn btn-primary">Se connecter</button> *@
@* </EditForm> *@

@* @if (!string.IsNullOrEmpty(errorMessage)) *@
@* { *@
@*     <div class="alert alert-danger mt-3">@errorMessage</div> *@
@* } *@

@* @code { *@
@*     private LoginModel model = new(); *@
@*     private string errorMessage = string.Empty; *@
@*     private bool isSuccess = false; *@
     

@*     private async Task HandleLogin() *@
@*     { *@
@*         try *@
@*         { *@
@*             var result = await AppService.Login(model.Email, model.Password); *@
@*             isSuccess = result.Success; *@

@*             if (isSuccess) *@
@*             { *@
@*                 // Stocke les infos et notifie le changement d'état *@
@*                 await ((CustomAuthStateProvider)AuthStateProvider) *@
@*                     .NotifyUserLoggedInAsync(model.Email, result.Role); *@

@*                 // Petit délai pour laisser le temps à l'état de se propager *@
@*                 await Task.Delay(50); *@

@*                 // Redirection avec forceLoad pour rafraîchir complètement *@
@*                 Navigation.NavigateTo("/students", forceLoad: true); *@
@*             } *@
@*             else *@
@*             { *@
@*                 errorMessage = result.Message; *@
@*             } *@
@*         } *@
@*         catch (Exception ex) *@
@*         { *@
@*             errorMessage = "Une erreur s'est produite lors de la connexion"; *@
@*             Console.WriteLine($"Erreur de connexion: {ex.Message}"); *@
@*         } *@
@*     } *@

@*     public class LoginModel *@
@*     { *@
@*         [Required(ErrorMessage = "L'email est requis")] *@
@*         [EmailAddress(ErrorMessage = "Format d'email invalide")] *@
@*         public string Email { get; set; } *@

@*         [Required(ErrorMessage = "Le mot de passe est requis")] *@
@*         public string Password { get; set; } *@
@*     } *@

@* } *@


@using MauiApp6.Services
@using Microsoft.AspNetCore.Components.Authorization
@using System.ComponentModel.DataAnnotations
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation
@inject IAppService AppService
@inject UserSessionService UserSession
@inject NavigationManager Navigation
@using Microsoft.Maui.Storage; // très important


<EditForm Model="@model" OnValidSubmit="@HandleLogin">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label>Email</label>
        <InputText @bind-Value="model.Email" class="form-control" />
        <ValidationMessage For="@(() => model.Email)" />
    </div>
    <div class="form-group">
        <label>Mot de passe</label>
        <InputText type="password" @bind-Value="model.Password" class="form-control" />
        <ValidationMessage For="@(() => model.Password)" />
    </div>
    <button type="submit" class="btn btn-primary">Se connecter</button>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}

@code {
    private LoginModel model = new();
    private string errorMessage = string.Empty;
    private bool isSuccess = false;

    private async Task HandleLogin()
    {
        try
        {
            var result = await AppService.Login(model.Email, model.Password);
            isSuccess = result.Success;

            if (isSuccess)
            {
                // await ((CustomAuthStateProvider)AuthStateProvider)
                //     .NotifyUserLoggedInAsync(model.Email, result.Role);
                // await SecureStorage.SetAsync("user_email", model.Email); 🛡️ On stocke l'email
                // Navigation.NavigateTo("/User", forceLoad: true);

                await Task.Delay(50);

                // Redirection selon le rôle
                if (result.Role == "Admin")
                {
                    await SecureStorage.SetAsync("role", result.Role);
                    await SecureStorage.SetAsync("user_email", model.Email); // 🛡️ On stocke l'email
                    Navigation.NavigateTo($"/User?email={model.Email}", forceLoad: true);
                }
                   
                else
                    Navigation.NavigateTo($"/Lost?email={model.Email}", forceLoad: true);

            }
            else
            {
                errorMessage = result.Message;
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Une erreur s'est produite lors de la connexion";
            Console.WriteLine($"Erreur de connexion: {ex.Message}");
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "L'email est requis")]
        [EmailAddress(ErrorMessage = "Format d'email invalide")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Le mot de passe est requis")]
        public string Password { get; set; }
    }
}
